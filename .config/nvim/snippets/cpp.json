{
    "CP boilerplate": {
        "prefix": "cp",
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "",
            "int main() {",
            "  ios::sync_with_stdio(false);",
            "  cin.tie(nullptr);",
            "",
            "  $0",
            "",
            "  return 0;",
            "}"
        ],
        "description": "Competitive Programming boilerplate code"
    },
    "CP boilerplate (interactive)": {
        "prefix": "cpi",
        "body": [
            "#include <bits/stdc++.h>",
            "using namespace std;",
            "",
            "int main() {",
            "  ios::sync_with_stdio(false);",
            "",
            "  $0",
            "",
            "  return 0;",
            "}"
        ],
        "description": "Competitive Programming boilerplate code (interactive)"
    },
    "Read vector": {
        "prefix": "rv",
        "body": [
            "vector<$1> $2($3);",
            "for (auto& x : $2) cin >> x;"
        ],
        "description": "Read vector from input"
    },
    "Read vector function": {
        "prefix": "rvf",
        "body": [
            "vector<$1> read_vector(size_t n) {",
            "  vector<$1> v(n);",
            "  for (auto& x : v) cin >> x;",
            "  return v;",
            "}"
        ],
        "description": "Read vector from input"
    },
    "Print vector": {
        "prefix": "pv",
        "body": [
            "for (size_t i = 0; i < $1.size(); ++i) {",
            "  if (i > 0) cout << ' ';",
            "  cout << $1[i];",
            "}",
            "cout << '\\n';"
        ],
        "description": "Print vector to output"
    },
    "Print vector function": {
        "prefix": "pvf",
        "body": [
            "template<typename T>",
            "void print_vector(vector<T> const& v) {",
            "for (size_t i = 0; i < v.size(); ++i) {",
            "  if (i > 0) cout << ' ';",
            "  cout << v[i];",
            "}",
            "cout << '\\n';"
        ],
        "description": "Print vector to output"
    },
    "Unsigned long long typedef": {
        "prefix": "ull",
        "body": ["using ull = unsigned long long;"],
        "description": "Typedef for unsigned long long"
    },
    "Sieve of Eratosthenes": {
        "prefix": "sieve",
        "body": [
            "vector<bool> sieve_of_eratosthenes(size_t n) {",
            "  vector<bool> is_prime(n + 1, true);",
            "  is_prime[0] = is_prime[1] = false;",
            "  for (size_t i = 4; i <= n; i += 2) is_prime[i] = false;",
            "  for (size_t i = 3; i * i <= n; i += 2) {",
            "    if (is_prime[i]) {",
            "      for (size_t j = i * i; j <= n; j += i) is_prime[j] = false;",
            "    }",
            "  }",
            "  return is_prime;",
            "}"
        ],
        "description": "Sieve of Eratosthenes to find all primes up to n"
    }
}
